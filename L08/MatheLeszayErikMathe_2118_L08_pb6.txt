#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX 20
int elementepozitive(int* a, int b, int c) {
	int i = 0, j = 0;
	int* val;
	for (i = 0; i < b; i++) {

		for (j = 0; j < b; j++) {
			val = ((a + i) + j);
			if (*val % 2 == 0) {
				printf("\nPozitiile unde se gasesc numere pare din %i matrice sunt: %i"  c, *val);
			}
		}
	}//end for
	return 0;
}
int main(void)
{
	int i, j, n, tab1[MAX][MAX], tab2[MAX][MAX], a = 1, b = 2;
	printf("\nIntroduceti dimensiunea primei matrici: ");
	scanf("%d", &n);
	if (n <= 0) {
		printf("\n\tDimensiunea data este negativa !");
		return 0;
	}//end if
	printf("\nIntroduceti elementele primei matrici:");
	for (i = 0; i < n; i++) {
		printf("\n\t Linia %d: \n", i + 1);
		for (j = 0; j < n; j++) {
			printf("\t\ttab[%d,%d] = ", i + 1, j + 1);
			scanf("%d", &tab1[i][j]);

		}
	}//end for


	printf("\nIntroduceti dimensiunea al doilea matrici: ");
	scanf("%d", &n);
	if (n <= 0) {
		printf("\n\tDimensiunea data este negativa !");
		return 0;
	}//end if
	printf("\nIntroduceti elementele al doilea matrici matrici:");
	for (i = 0; i < n; i++) {
		printf("\n\t Linia %d: \n", i + 1);
		for (j = 0; j < n; j++) {
			printf("\t\ttab[%d,%d] = ", i + 1, j + 1);
			scanf("%d", &tab2[i][j]);
			
		}
	}//end for
	
	int elementepozitive(tab1, n, a);
	int elementepozitive(tab2, n, b);
	return 0;
}
